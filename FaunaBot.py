import tkinter as tk
from tkinter import messagebox, ttk
import yfinance as yf
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
import numpy as np

def validate_and_format_date(date_str):
    try:
        # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –∫–∞–∫ ISO (YYYY-MM-DD)
        return datetime.strptime(date_str, "%Y-%m-%d").strftime("%Y-%m-%d")
    except ValueError:
        try:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –∫–∞–∫ DD.MM.YYYY
            return datetime.strptime(date_str, "%d.%m.%Y").strftime("%Y-%m-%d")
        except ValueError:
            return None

def fetch_and_analyze():
    ticker = ticker_entry.get().strip().upper()
    start_date_raw = start_entry.get().strip()
    end_date_raw = end_entry.get().strip()
    model_type = model_choice.get()

    start_date = validate_and_format_date(start_date_raw)
    end_date = validate_and_format_date(end_date_raw)

    if not start_date or not end_date:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD –∏–ª–∏ DD.MM.YYYY.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–µ –ø–æ—Å–ª–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è
    if datetime.strptime(start_date, "%Y-%m-%d") >= datetime.strptime(end_date, "%Y-%m-%d"):
        messagebox.showerror("–û—à–∏–±–∫–∞", "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è.")
        return

    try:
        df = yf.download(ticker, start=start_date, end=end_date)
        if df.empty:
            raise ValueError("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞ –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç.")
        
        required_data_for_indicators = 34 
        if len(df) < required_data_for_indicators: 
            messagebox.showerror("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö", f"–¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º {required_data_for_indicators} –¥–Ω–µ–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤. –°–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ {len(df)} –¥–Ω–µ–π. –£–≤–µ–ª–∏—á—å—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç.")
            return

    except Exception as e:
        messagebox.showerror("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö", f"–û—à–∏–±–∫–∞: {e}\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–∏–∫–µ—Ä –∏ –¥–∞—Ç—ã. –í–æ–∑–º–æ–∂–Ω–æ, –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–æ–∑–∂–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–ª–∏ —Ç–∏–∫–µ—Ä –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.")
        return

    df['Return'] = df['Close'].pct_change()
    df['Target'] = (df['Return'].shift(-1) > 0).astype(int) 

    df['MA5'] = df['Close'].rolling(window=5).mean()
    df['MA10'] = df['Close'].rolling(window=10).mean()
    df['MA20'] = df['Close'].rolling(window=20).mean()
    df['Volatility'] = df['Close'].rolling(window=10).std()

    # --- –†—É—á–Ω–æ–π —Ä–∞—Å—á–µ—Ç RSI ---
    delta = df['Close'].diff(1)
    gain = delta.where(delta > 0, 0)
    loss = -delta.where(delta < 0, 0)

    avg_gain = gain.ewm(com=14 - 1, adjust=False).mean()
    avg_loss = loss.ewm(com=14 - 1, adjust=False).mean()

    rs = np.where(avg_loss == 0, np.inf, avg_gain / avg_loss)
    df['RSI'] = 100 - (100 / (1 + rs))
    # --- –ö–æ–Ω–µ—Ü —Ä—É—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ RSI ---

    # --- –†—É—á–Ω–æ–π —Ä–∞—Å—á–µ—Ç MACD ---
    ema_12 = df['Close'].ewm(span=12, adjust=False).mean()
    ema_26 = df['Close'].ewm(span=26, adjust=False).mean()
    df['MACD_Line'] = ema_12 - ema_26
    df['Signal_Line'] = df['MACD_Line'].ewm(span=9, adjust=False).mean()
    df['MACD_Diff'] = df['MACD_Line'] - df['Signal_Line']
    # --- –ö–æ–Ω–µ—Ü —Ä—É—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ MACD ---

    df.dropna(inplace=True)

    min_data_for_model = 50
    if len(df) < min_data_for_model: 
        messagebox.showerror("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Ä–∞—Å—á–µ—Ç–∞ –≤—Å–µ—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤. –¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º {min_data_for_model} –¥–Ω–µ–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç.")
        return

    features = ['Close', 'MA5', 'MA10', 'MA20', 'Volatility', 'RSI', 'MACD_Diff'] 
    
    missing_features = [
        f for f in features 
        if f not in df.columns or (f in df.columns and df[f].squeeze().isnull().all())
    ]
    if missing_features:
        messagebox.showerror("–û—à–∏–±–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏–ª–∏ –æ–Ω–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–æ–ª—å–∫–æ NaN: {', '.join(missing_features)}. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏—Ö —Ä–∞—Å—á–µ—Ç–∞.")
        return

    X = df[features]
    y = df['Target']

    test_size_val = 0.2
    if len(X) < 2:
        messagebox.showerror("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ (–º–∏–Ω–∏–º—É–º 2 —Ç–æ—á–∫–∏). –£–≤–µ–ª–∏—á—å—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç.")
        return
    elif len(X) < 5: 
        test_size_val = 1 / len(X) 

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size_val, shuffle=False)

    if model_type == "Random Forest":
        model = RandomForestClassifier(n_estimators=100, random_state=42)
    elif model_type == "Logistic Regression":
        model = LogisticRegression(max_iter=1000, random_state=42)
    else:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–æ–¥–µ–ª–∏.")
        return

    if len(X_train) == 0:
        messagebox.showerror("–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç.")
        return

    model.fit(X_train, y_train)

    accuracy = 0
    if len(X_test) > 0:
        predictions = model.predict(X_test)
        accuracy = accuracy_score(y_test, predictions)

    next_day_prediction = None
    if not X.empty:
        latest_data_point = X.iloc[[-1]] 
        next_day_prediction = model.predict(latest_data_point)[0]

    prognosis_text = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å"
    if next_day_prediction is not None:
        prognosis_text = "–†–æ—Å—Ç  üìà " if next_day_prediction == 1 else "–ü–∞–¥–µ–Ω–∏–µ  üìâ "

    messagebox.showinfo("–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞",
                        f"–¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ ({model_type}): {accuracy * 100:.2f}%\n"
                        f"–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ç–æ—Ä–≥–æ–≤—ã–π –¥–µ–Ω—å: {prognosis_text}")

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
    # –ó–¥–µ—Å—å —Ü–≤–µ—Ç–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ª—É—á—à–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–∞–∫–∏–º–∏, —á—Ç–æ–±—ã –æ–Ω–∏ –±—ã–ª–∏ —Ä–∞–∑–ª–∏—á–∏–º—ã
    # –ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –∏—Ö —Ç–æ–∂–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ —á–µ—Ä–Ω–æ-–±–µ–ª–æ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–µ, –¥–∞–π –∑–Ω–∞—Ç—å!
    fig, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(14, 10), sharex=True)
    fig.suptitle(f"–ê–Ω–∞–ª–∏–∑ {ticker}", fontsize=16, color='black') # –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞

    # –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã –∏ —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö
    ax1.plot(df.index, df['Close'], label='–¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è', color='blue')
    ax1.plot(df.index, df['MA5'], label='MA 5', linestyle='--', color='orange')
    ax1.plot(df.index, df['MA10'], label='MA 10', linestyle='--', color='red')
    ax1.plot(df.index, df['MA20'], label='MA 20', linestyle='--', color='purple')
    ax1.set_ylabel("–¶–µ–Ω–∞")
    ax1.legend()
    ax1.grid(True)

    # –ì—Ä–∞—Ñ–∏–∫ RSI
    ax2.plot(df.index, df['RSI'], label='RSI (14)', color='green')
    ax2.axhline(70, color='red', linestyle='--', alpha=0.7, label='–ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å (70)')
    ax2.axhline(30, color='blue', linestyle='--', alpha=0.7, label='–ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å (30)')
    ax2.set_ylabel("RSI")
    ax2.legend()
    ax2.grid(True)

    # –ì—Ä–∞—Ñ–∏–∫ MACD
    ax3.plot(df.index, df['MACD_Line'], label='MACD Line', color='blue')
    ax3.plot(df.index, df['Signal_Line'], label='Signal Line', color='red', linestyle='--')
    ax3.bar(df.index, df['MACD_Diff'], label='MACD Histogram', color='gray', alpha=0.5)
    ax3.axhline(0, color='black', linestyle='--', alpha=0.7)
    ax3.set_ylabel("MACD")
    ax3.set_xlabel("–î–∞—Ç–∞")
    ax3.legend()
    ax3.grid(True)

    plt.tight_layout(rect=[0, 0.03, 1, 0.96]) 
    plt.show()


# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
root = tk.Tk()
root.title("FaunaBOT")
root.geometry("450x380") 

# --- –¶–≤–µ—Ç–∞ –¥–ª—è —Å—Ç–∏–ª—è ---
bg_color = "#1a1a1a"       # –û—á–µ–Ω—å —Ç–µ–º–Ω—ã–π —Å–µ—Ä—ã–π / –ø–æ—á—Ç–∏ —á–µ—Ä–Ω—ã–π
fg_color = "#e0e0e0"       # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π / –ø–æ—á—Ç–∏ –±–µ–ª—ã–π
button_bg_color = "#8a2be2" # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π (BlueViolet)
button_fg_color = "#ffffff" # –ë–µ–ª—ã–π
entry_bg_color = "#333333" # –¢–µ–º–Ω–æ-—Å–µ—Ä—ã–π –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
entry_fg_color = "#ffffff" # –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª—è—Ö –≤–≤–æ–¥–∞
select_bg_color = "#5a2be2" # –ù–µ–º–Ω–æ–≥–æ –¥—Ä—É–≥–æ–π —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è/—Ñ–æ–Ω–∞ –∫–æ–º–±–æ–±–æ–∫—Å–∞

root.config(bg=bg_color)

tk.Label(root, text="–¢–∏–∫–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTC-USD, AAPL):", bg=bg_color, fg=fg_color).pack(pady=5)
ticker_entry = tk.Entry(root, width=30, bg=entry_bg_color, fg=entry_fg_color, insertbackground=fg_color) # insertbackground –º–µ–Ω—è–µ—Ç —Ü–≤–µ—Ç –∫—É—Ä—Å–æ—Ä–∞
ticker_entry.pack(pady=2)
ticker_entry.insert(0, "BTC-USD")

tk.Label(root, text="–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ (YYYY-MM-DD):", bg=bg_color, fg=fg_color).pack(pady=5)
start_entry = tk.Entry(root, width=30, bg=entry_bg_color, fg=entry_fg_color, insertbackground=fg_color)
start_entry.pack(pady=2)
start_entry.insert(0, (datetime.now() - timedelta(days=365*2)).strftime("%Y-%m-%d")) 

tk.Label(root, text="–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è (YYYY-MM-DD):", bg=bg_color, fg=fg_color).pack(pady=5)
end_entry = tk.Entry(root, width=30, bg=entry_bg_color, fg=entry_fg_color, insertbackground=fg_color)
end_entry.pack(pady=2)
end_entry.insert(0, datetime.now().strftime("%Y-%m-%d")) 

tk.Label(root, text="–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏:", bg=bg_color, fg=fg_color).pack(pady=5)

# –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è Combobox
style = ttk.Style()
# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ–º—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'clam', 'alt', 'default', 'classic')
style.theme_use('clam') 
# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–æ–Ω –∏ —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è Combobox
style.configure("TCombobox", 
                fieldbackground=entry_bg_color, 
                background=bg_color, # –§–æ–Ω –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
                foreground=entry_fg_color,
                selectbackground=select_bg_color, # –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –ø—Ä–∏ –≤—ã–¥–µ–ª–µ–Ω–∏–∏
                selectforeground=button_fg_color,
                arrowcolor=fg_color) # –¶–≤–µ—Ç —Å—Ç—Ä–µ–ª–∫–∏
# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º —Å–ø–∏—Å–∫–µ –ø—Ä–∏ –µ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏–∏
style.map('TCombobox',
          fieldbackground=[('readonly', entry_bg_color)],
          background=[('readonly', bg_color)],
          foreground=[('readonly', entry_fg_color)])

model_choice = ttk.Combobox(root, values=["Random Forest", "Logistic Regression"], width=27, style="TCombobox")
model_choice.set("Random Forest") 
model_choice.pack(pady=2)

tk.Button(root, text="–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –∏ –ø—Ä–æ–≥–Ω–æ–∑", command=fetch_and_analyze, 
          bg=button_bg_color, fg=button_fg_color, padx=10, pady=5, 
          activebackground=select_bg_color, activeforeground=button_fg_color, # –¶–≤–µ—Ç–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
          relief="flat").pack(pady=20) # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ä–∞–º–∫—É –¥–ª—è –±–æ–ª–µ–µ –ø–ª–æ—Å–∫–æ–≥–æ –≤–∏–¥–∞

root.mainloop()